/*
 * Pueda usar esta plantilla para la carga del reto a iMaster
 * Copie las clases de los paquetes Modelo, Vista, Controlador y Util
 * No incluya los import de los archivos .java solo las clases
 */
// Importaciones necesarias en iMaster
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.util.ArrayList;

// Util (No modificar)
class JDBCUtilities {
    private static final String DATABASE_LOCATION = "ProyectosConstruccion.db";

    public static Connection getConnection() throws SQLException {
        String url = "jdbc:sqlite:"+DATABASE_LOCATION;

        return DriverManager.getConnection(url);
    }
}

// Remplace en adelante por las clases de sus archivos .java

// Vista
class VistaRequerimientos {
    public static final ElControladorDeRequerimientos Controlador = new ElControladorDeRequerimientos();

    public static void requerimiento1(){
        
        try {
            //Mostrar los proyectos realizado en la ciudad de Bogota
            ArrayList<Requerimiento_1> lista1 = Controlador.consultarRequerimiento1();
            for (Requerimiento_1 requery1 : lista1) {
                System.out.printf("%d %s %s %s %n", 
                requery1.getID_Proyecto(),
                requery1.getCiudad(),
                requery1.getBanco_Vinculado(),
                requery1.getConstructora());
            }
        } catch (Exception e) {
            System.err.println("Ha ocurrido un error!"+e.getMessage());
        }
    }

    public static void requerimiento2(){
        
        try {
            //Mostrar los los lideres ellido con cargo de asesor o coordinador, y con salario menor o igual a 310000
            ArrayList<Requerimiento_2> lista2 = Controlador.consultarRequerimiento2();
            for (Requerimiento_2 requery2 : lista2) {
                System.out.printf("%s %s %s %s %d %n", 
                requery2.getNombre(),
                requery2.getPrimer_Apellido(),
                requery2.getCiudad_Residencia(),
                requery2.getCargo(),
                requery2.getSalario());
            }
        } catch (Exception e) {
            System.err.println("Ha ocurrido un error!"+e.getMessage());
        }
    }

    public static void requerimiento3(){
        try {
           //Mostrar las compras No pagadas al proveedor JUMBO por constructoras
           ArrayList<Requerimiento_3> lista3 = Controlador.consultarRequerimiento3();
           for (Requerimiento_3 requery3 : lista3) {
               System.out.printf("%s %s %s %n", 
               requery3.getProveedor(),
               requery3.getPagado(),
               requery3.getConstructora());
           }
        } catch (Exception e) {
            System.err.println("Ha ocurrido un error!"+e.getMessage());
        }
    }
}

// Controlador
class ElControladorDeRequerimientos {
    
    private final Requerimiento_1Dao requerimiento_1Dao;
    private final Requerimiento_2Dao requerimiento_2Dao;
    private final Requerimiento_3Dao requerimiento_3Dao;

    public ElControladorDeRequerimientos(){
        this.requerimiento_1Dao = new Requerimiento_1Dao();
        this.requerimiento_2Dao = new Requerimiento_2Dao();
        this.requerimiento_3Dao = new Requerimiento_3Dao();
    }
    
        public ArrayList<Requerimiento_1> consultarRequerimiento1() throws SQLException {
            return this.requerimiento_1Dao.requerimiento1();
        }
    
        public ArrayList<Requerimiento_2> consultarRequerimiento2() throws SQLException {
            return this.requerimiento_2Dao.requerimiento2();
        }
    
        public ArrayList<Requerimiento_3> consultarRequerimiento3() throws SQLException {
            return this.requerimiento_3Dao.requerimiento3();
        } 

}

// Modelo
// VO
class Requerimiento_1 {
    private Integer ID_Proyecto;
    private String Ciudad;
    private String Banco_Vinculado;
    private String Constructora;

    public Requerimiento_1() {
    }

    public Requerimiento_1(Integer iD_Proyecto, String ciudad) {
        ID_Proyecto = iD_Proyecto;
        Ciudad = ciudad;
    }

    public Requerimiento_1(Integer iD_Proyecto, String ciudad, String banco_Vinculado, String constructora) {
        ID_Proyecto = iD_Proyecto;
        Ciudad = ciudad;
        Banco_Vinculado = banco_Vinculado;
        Constructora = constructora;
    }

    public Integer getID_Proyecto() {
        return ID_Proyecto;
    }
    public void setID_Proyecto(Integer iD_Proyecto) {
        ID_Proyecto = iD_Proyecto;
    }
    public String getCiudad() {
        return Ciudad;
    }
    public void setCiudad(String ciudad) {
        Ciudad = ciudad;
    }
    public String getBanco_Vinculado() {
        return Banco_Vinculado;
    }
    public void setBanco_Vinculado(String banco_Vinculado) {
        Banco_Vinculado = banco_Vinculado;
    }
    public String getConstructora() {
        return Constructora;
    }
    public void setConstructora(String constructora) {
        Constructora = constructora;
    }
}

class Requerimiento_2 {
    private String Nombre, Primer_Apellido, Ciudad_Residencia, Cargo;
    private Integer Salario;

    public Requerimiento_2() {
    }

    public Requerimiento_2(String nombre, String primer_Apellido, Integer salario) {
        Nombre = nombre;
        Primer_Apellido = primer_Apellido;
        Salario = salario;
    }

    public Requerimiento_2(String nombre, String primer_Apellido, String ciudad_Residencia, String cargo,
            Integer salario) {
        Nombre = nombre;
        Primer_Apellido = primer_Apellido;
        Ciudad_Residencia = ciudad_Residencia;
        Cargo = cargo;
        Salario = salario;
    }

    public String getNombre() {
        return Nombre;
    }
    public void setNombre(String nombre) {
        Nombre = nombre;
    }
    public String getPrimer_Apellido() {
        return Primer_Apellido;
    }
    public void setPrimer_Apellido(String primer_Apellido) {
        Primer_Apellido = primer_Apellido;
    }
    public String getCiudad_Residencia() {
        return Ciudad_Residencia;
    }
    public void setCiudad_Residencia(String ciudad_Residencia) {
        Ciudad_Residencia = ciudad_Residencia;
    }
    public String getCargo() {
        return Cargo;
    }
    public void setCargo(String cargo) {
        Cargo = cargo;
    }
    public Integer getSalario() {
        return Salario;
    }
    public void setSalario(Integer salario) {
        Salario = salario;
    }
}

class Requerimiento_3 {
    
    private String Proveedor, Pagado, Constructora;

    public Requerimiento_3() {
    }

    public Requerimiento_3(String proveedor, String pagado, String constructora) {
        Proveedor = proveedor;
        Pagado = pagado;
        Constructora = constructora;
    }

    public String getProveedor() {
        return Proveedor;
    }

    public void setProveedor(String proveedor) {
        Proveedor = proveedor;
    }

    public String getPagado() {
        return Pagado;
    }

    public void setPagado(String pagado) {
        Pagado = pagado;
    }

    public String getConstructora() {
        return Constructora;
    }

    public void setConstructora(String constructora) {
        Constructora = constructora;
    }

}

// DAO
class Requerimiento_1Dao {
    
    public ArrayList<Requerimiento_1> requerimiento1()  throws SQLException {
        
        ArrayList<Requerimiento_1> respuesta = new ArrayList<Requerimiento_1>();
        Connection conexion = JDBCUtilities.getConnection();
        try {
            String consulta = "SELECT ID_Proyecto, Ciudad, Banco_Vinculado, Constructora "+
            "FROM Proyecto "+
            "WHERE Ciudad = 'Bogota'";
            PreparedStatement statement = conexion.prepareStatement(consulta);
            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                Requerimiento_1 requerimiento_1 = new Requerimiento_1();

                requerimiento_1.setID_Proyecto(resultSet.getInt("ID_Proyecto"));
                requerimiento_1.setCiudad(resultSet.getString("Ciudad"));
                requerimiento_1.setBanco_Vinculado(resultSet.getString("Banco_Vinculado"));
                requerimiento_1.setConstructora(resultSet.getString("Constructora"));

                respuesta.add(requerimiento_1);
            }
            resultSet.close();
            statement.close();
        } catch (Exception e) {
            System.err.println("Error consultando: " + e);
        } finally {
            if (conexion != null) {
                conexion.close();
            }
        }
        return respuesta;
    }
}

class Requerimiento_2Dao {
    //Obtener los los lideres ellido con cargo de asesor o coordinador, y con salario menor o igual a 310000
    public ArrayList<Requerimiento_2> requerimiento2()  throws SQLException {

        ArrayList<Requerimiento_2> respuesta = new ArrayList<Requerimiento_2>();
        Connection conexion = JDBCUtilities.getConnection();
        try {
            String consulta = "SELECT Nombre, Primer_Apellido, Ciudad_Residencia, Cargo, Salario "+
            "FROM Lider "+
            "WHERE (Cargo = 'Asesor' OR Cargo = 'Coordinador')"+
            "AND  Salario <= 310000 ";
            PreparedStatement statement = conexion.prepareStatement(consulta);
            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                Requerimiento_2 requerimiento_2 = new Requerimiento_2();

                requerimiento_2.setNombre(resultSet.getString("Nombre"));
                requerimiento_2.setPrimer_Apellido(resultSet.getString("Primer_Apellido"));
                requerimiento_2.setCiudad_Residencia(resultSet.getString("Ciudad_Residencia"));     
                requerimiento_2.setCargo(resultSet.getString("Cargo"));
                requerimiento_2.setSalario(resultSet.getInt("Salario"));

                respuesta.add(requerimiento_2);
            }
            resultSet.close();
            statement.close();
        } catch (Exception e) {
            System.err.println("Error consultando: " + e);
        } finally {
            if (conexion != null) {
                conexion.close();
            }
        }
        return respuesta;
    }

}

class Requerimiento_3Dao {
    //Obtener las compras No pagadas al proveedor JUMBO por constructoras
    public ArrayList<Requerimiento_3> requerimiento3()  throws SQLException {

        ArrayList<Requerimiento_3> respuesta = new ArrayList<Requerimiento_3>();
        Connection conexion = JDBCUtilities.getConnection();
        try {
            String consulta = "SELECT c.Proveedor, c.Pagado, p.Constructora "+
            "FROM Compra c "+
            "INNER JOIN Proyecto p "+
            "ON c.ID_Proyecto = p.ID_Proyecto  "+
            "WHERE c.Pagado = 'No'"+
            "AND c.Proveedor = 'JUMBO'";
            PreparedStatement statement = conexion.prepareStatement(consulta);
            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                Requerimiento_3 requerimiento_3 = new Requerimiento_3();

                requerimiento_3.setProveedor(resultSet.getString("Proveedor"));
                requerimiento_3.setPagado(resultSet.getString("Pagado"));
                requerimiento_3.setConstructora(resultSet.getString("Constructora"));     

                respuesta.add(requerimiento_3);
            }
            resultSet.close();
            statement.close();
        } catch (Exception e) {
            System.err.println("Error consultando: " + e);
        } finally {
            if (conexion != null) {
                conexion.close();
            }
        }
        return respuesta;
    }
}